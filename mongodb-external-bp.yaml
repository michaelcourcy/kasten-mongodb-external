apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: mongodb-external-bp
  namespace: kasten-io
actions:
  backup:
    outputArtifacts:
      mongoBackup:
        # Capture the kopia snapshot information for subsequent actions
        # The information includes the kopia snapshot ID which is essential for restore and delete to succeed
        # `kopiaOutput` is the name provided to kando using `--output-name` flag
        kopiaSnapshot: "{{ .Phases.takeConsistentBackup.Output.kopiaOutput }}"
    phases:
    - func: KubeTask
      name: takeConsistentBackup
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: ghcr.io/kanisterio/mongodb:0.95.0
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -x 
          - -c
          - |
            auth_database="{{ index .Object.data "auth-database" | toString | b64dec }}"
            username="{{ index .Object.data "username" | toString | b64dec }}"
            password="{{ index .Object.data "password" | toString | b64dec }}"
            mongo_host="{{ index .Object.data "mongo_host" | toString | b64dec }}"
            port="{{ index .Object.data "port" | toString | b64dec }}"
            dump_cmd="mongodump --gzip --archive --host ${mongo_host} --username $username --password $password --port $port --authenticationDatabase $auth_database"
            backup_file_path='rs_backup.gz'
            ${dump_cmd} | kando location push --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --output-name "kopiaOutput" -
  restore:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `mongoBackup.KopiaSnapshot`
      - mongoBackup
    phases:
    - func: KubeTask
      name: pullFromStore      
      args:
        namespace: "{{ .Object.metadata.namespace }}"
        image: ghcr.io/kanisterio/mongodb:0.95.0
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -x 
          - -c
          - |
            auth_database="{{ index .Object.data "auth-database" | toString | b64dec }}"
            username="{{ index .Object.data "username" | toString | b64dec }}"
            password="{{ index .Object.data "password" | toString | b64dec }}"
            mongo_host="{{ index .Object.data "mongo_host" | toString | b64dec }}"
            port="{{ index .Object.data "port" | toString | b64dec }}"
            restore_cmd="mongorestore --gzip --archive --drop --host $mongo_host --username $username --password $password --port $port --authenticationDatabase $auth_database"
            backup_file_path='rs_backup.gz'
            kopia_snap='{{ .ArtifactsIn.mongoBackup.KopiaSnapshot }}'
            kando location pull --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}" - | ${restore_cmd}
  delete:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `mongoBackup.KopiaSnapshot`
      - mongoBackup
    phases:
    - func: KubeTask
      name: deleteFromStore
      args:
        namespace: "{{ .Namespace.Name }}"
        image: ghcr.io/kanisterio/mongodb:0.95.0
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            backup_file_path='rs_backup.gz'
            kopia_snap='{{ .ArtifactsIn.mongoBackup.KopiaSnapshot }}'
            kando location delete --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}"